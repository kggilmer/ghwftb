name: API Docs Parallel

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to generate API docs from'
        required: true

env:
  PACKAGE_NAME: aws-sdk-kotlin
  DOC_LOCATION: build/dokka/htmlMultiModule/

jobs:
  api-doc-gen-parallel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service-prefix: [ a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.tag }}
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Generate API Docs for ${{ env.PACKAGE_NAME }}
        run: |
          excluded_services=("transcribestreaming" "timestreamwrite" "timestreamquery")
          set -x
          echo "org.gradle.daemon=false" >> gradle.properties
          shopt -s nullglob
          for aws_model_file in codegen/sdk/aws-models/${{ matrix.service-prefix }}*.json
          do
            MODEL_FILENAME=${aws_model_file##*/}    # Extract the filename from the path
            SERVICE_NAME=$(echo "$MODEL_FILENAME" | cut -d. -f1 ) # Extract the service name from the filename
            excluded=$(echo "${excluded_services[@]}" | grep -ow "$SERVICE_NAME" | wc -w)
            if [[ $excluded == 0 ]]; then
              echo "Building docs for $SERVICE_NAME"

              echo ./gradlew -Paws.services=+$SERVICE_NAME :codegen:sdk:bootstrap  # generate SDK
              echo ./gradlew --no-parallel -PdokkaOutSubDir=$SERVICE_NAME dokkaHtmlMultiModule # generate docs for SDK
              echo git clean -dfx services # delete src for generated SDK

              mkdir -p build/dokka/build/dokka/htmlMultiModule/$SERVICE_NAME
              echo $SERVICE_NAME > build/dokka/build/dokka/htmlMultiModule/$SERVICE_NAME/$SERVICE_NAME.txt
            else
              echo "Ignoring excluded service $SERVICE_NAME"
            fi
          done
      - name: Create Branch
        if: ${{ false }}
        run: |
          set -x
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout --orphan api-docs-segment-${{ matrix.service-prefix }}
          git commit --allow-empty -m "empty"
          git push origin api-docs-segment-${{ matrix.service-prefix }}
      - name: Stage in branch
        uses: peaceiris/actions-gh-pages@v3.7.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: api-docs-segment-${{ matrix.service-prefix }}
          publish_dir: ${{ env.DOC_LOCATION }}
          destination_dir: .
          allow_empty_commit: false # optional, default is false
          user_name: AWS CI
          user_email: nobody@amazonaws.com
          commit_message: Update docs
          disable_nojekyll: true

  combine-docs:
    needs: api-doc-gen-parallel
    runs-on: ubuntu-latest
    steps:
      - name: Combine
        run: |
          git fetch
          for segment in {a..z}
          do
            SEGMENT_BRANCH="api-docs-segment-$segment"
            branch_exists=$(git ls-remote --heads git@github.com:user/repo.git $SEGMENT_BRANCH | wc -l)

            if [ branch_exists == 1 ]; then
              echo "Merging $SEGMENT_BRANCH"
            else
              echo "No work for $SEGMENT_BRANCH"
          done
